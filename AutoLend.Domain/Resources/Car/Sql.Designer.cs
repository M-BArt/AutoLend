//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AutoLend.Data.Resources.Car {
    using System;
    
    
    /// <summary>
    ///   Klasa zasobu wymagająca zdefiniowania typu do wyszukiwania zlokalizowanych ciągów itd.
    /// </summary>
    // Ta klasa została automatycznie wygenerowana za pomocą klasy StronglyTypedResourceBuilder
    // przez narzędzie, takie jak ResGen lub Visual Studio.
    // Aby dodać lub usunąć składową, edytuj plik ResX, a następnie ponownie uruchom narzędzie ResGen
    // z opcją /str lub ponownie utwórz projekt VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Sql {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Sql() {
        }
        
        /// <summary>
        /// Zwraca buforowane wystąpienie ResourceManager używane przez tę klasę.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("AutoLend.Data.Resources.Car.Sql", typeof(Sql).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Przesłania właściwość CurrentUICulture bieżącego wątku dla wszystkich
        ///   przypadków przeszukiwania zasobów za pomocą tej klasy zasobów wymagającej zdefiniowania typu.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu DECLARE @ModelId INT;
        ///
        ///SELECT 
        ///    @ModelId = Id 
        ///FROM 
        ///    dbo.Models 
        ///WHERE 
        ///    ModelName LIKE &apos;%&apos; + @ModelName + &apos;%&apos;;
        ///
        ///IF @ModelId IS NULL
        ///    BEGIN
        ///        RAISERROR (&apos;Model not found.&apos;, 16, 1);
        ///    END
        ///ELSE
        ///    BEGIN
        ///    INSERT INTO [dbo].[Cars] (
        ///        [ModelId],
        ///        [Year],
        ///        [LicensePlate],
        ///        [IsAvailable],
        ///        [IsActive]
        ///    ) 
        ///    VALUES (
        ///        @ModelId,
        ///        @Year,
        ///        @LicensePlate,
        ///        @IsAvailable,
        ///        1
        ///    )
        ///END.
        /// </summary>
        public static string Car_Create {
            get {
                return ResourceManager.GetString("Car_Create", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu IF 
        ///(EXISTS (SELECT 1 FROM dbo.Cars WHERE Id = @CarId AND IsActive = 0)) 
        ///OR (NOT EXISTS (SELECT 1 FROM dbo.Cars WHERE Id = @CarId AND dbo.Cars.IsActive = 1)) 
        ///BEGIN RAISERROR (&apos;Car not found.&apos;,16, 1) END
        ///ELSE
        ///
        ///
        ///UPDATE CA
        ///SET 
        ///	IsActive = 0 
        ///FROM 
        ///	dbo.Cars AS CA
        ///WHERE 
        ///	CA.Id = @carId 
        ///AND IsActive = 1;.
        /// </summary>
        public static string Car_Delete {
            get {
                return ResourceManager.GetString("Car_Delete", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu SELECT 
        ///	CA.Id, 
        ///	B.BrandName, 
        ///	M.ModelName, 
        ///	CA.Year, 
        ///	CA.LicensePlate, 
        ///	CA.IsAvailable
        ///
        ///FROM dbo.Cars				AS CA
        ///	INNER JOIN dbo.Models	AS M  ON CA.ModelId = M.Id
        ///	INNER JOIN dbo.Brands	AS B  ON M.BrandId = B.Id
        ///
        ///WHERE 
        ///		CA.IsActive = 1
        ///	AND	B.IsActive = 1
        ///	AND	M.IsActive = 1;.
        /// </summary>
        public static string Car_GetAll {
            get {
                return ResourceManager.GetString("Car_GetAll", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu IF 
        ///(EXISTS (SELECT 1 FROM dbo.Cars WHERE Id = @CarId AND IsActive = 0)) 
        ///OR (NOT EXISTS (SELECT 1 FROM dbo.Cars WHERE Id = @CarId)) 
        ///BEGIN RAISERROR (&apos;Car not found.&apos;,16, 1) END
        ///ELSE
        ///
        ///SELECT 
        ///	CA.Id, 
        ///	B.BrandName, 
        ///	M.ModelName, 
        ///	CA.Year, 
        ///	CA.LicensePlate, 
        ///	CA.IsAvailable
        ///
        ///FROM dbo.Cars				AS CA 
        ///	INNER JOIN dbo.Models	AS M  ON CA.ModelId = M.Id
        ///	INNER JOIN dbo.Brands	AS B  ON M.BrandId = B.Id
        ///
        ///WHERE 
        ///		CA.Id = @carId 
        ///	AND CA.IsActive = 1
        ///	AND M.IsActive = 1;
        ///.
        /// </summary>
        public static string Car_GetById {
            get {
                return ResourceManager.GetString("Car_GetById", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu SELECT
        ///	[CA].Id,
        ///	[CA].[LicensePlate],
        ///	[CA].[Cost]
        ///FROM
        ///	[dbo].[Cars] AS CA
        ///WHERE
        ///	[CA].[LicensePlate] = @LicensePlate
        ///AND	[CA].[IsActive] = 1.
        /// </summary>
        public static string Car_GetByLicensePlate {
            get {
                return ResourceManager.GetString("Car_GetByLicensePlate", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu SET
        ///    @Page = ISNULL(@Page, 1)
        ///SET
        ///    @PageSize = ISNULL(@PageSize, 10)
        ///SET
        ///    @OrderDir = ISNULL(@OrderDir, 1)
        ///SET
        ///    @OrderBy = ISNULL(@OrderBy, &apos;Name&apos;) DECLARE @OrderDesc VARCHAR(10) = CASE
        ///        WHEN @OrderDir &lt; 0 THEN &apos;DESC&apos;
        ///        WHEN @OrderDir &gt;= 0 THEN &apos;ASC&apos;
        ///    END DECLARE @SortExpression VARCHAR(300) = CONCAT(@OrderBy, &apos; &apos;, @OrderDesc);
        ///
        ///
        ///DECLARE @ModelData TABLE (
        ///    ModelId INT
        ///);
        ///
        ///INSERT INTO @ModelData (ModelId)
        ///SELECT ModelId
        ///FROM OPENJSON(@json)
        ///WITH (
        ///    Mode [obcięto pozostałą część ciągu]&quot;;.
        /// </summary>
        public static string Car_Search {
            get {
                return ResourceManager.GetString("Car_Search", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu IF 
        ///(EXISTS (SELECT 1 FROM dbo.Cars WHERE Id = @Id AND IsActive = 0)) OR (NOT EXISTS (SELECT 1 FROM dbo.Cars WHERE Id = @Id)) 
        ///BEGIN RAISERROR (&apos;Car not found.&apos;,16, 1) END
        ///ELSE
        ///
        ///IF NOT EXISTS (SELECT * FROM dbo.Models WHERE ModelName LIKE &apos;%&apos; + @ModelName + &apos;%&apos;)
        ///BEGIN
        ///    RAISERROR (&apos;Model not found.&apos;, 16, 1);
        ///END
        ///
        ///UPDATE CA
        ///	SET 
        ///		CA.year			= COALESCE(NULLIF(@Year, &apos;&apos;), CA.year), 
        ///		CA.ModelId		= COALESCE((SELECT id FROM dbo.Models WHERE Models.ModelName LIKE &apos;%&apos; + NULLIF(@ModelName, &apos;&apos;) + &apos;% [obcięto pozostałą część ciągu]&quot;;.
        /// </summary>
        public static string Car_Update {
            get {
                return ResourceManager.GetString("Car_Update", resourceCulture);
            }
        }
    }
}
