//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AutoLend.Data.Resources.Car {
    using System;
    
    
    /// <summary>
    ///   Klasa zasobu wymagająca zdefiniowania typu do wyszukiwania zlokalizowanych ciągów itd.
    /// </summary>
    // Ta klasa została automatycznie wygenerowana za pomocą klasy StronglyTypedResourceBuilder
    // przez narzędzie, takie jak ResGen lub Visual Studio.
    // Aby dodać lub usunąć składową, edytuj plik ResX, a następnie ponownie uruchom narzędzie ResGen
    // z opcją /str lub ponownie utwórz projekt VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Sql {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Sql() {
        }
        
        /// <summary>
        /// Zwraca buforowane wystąpienie ResourceManager używane przez tę klasę.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("AutoLend.Data.Resources.Car.Sql", typeof(Sql).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Przesłania właściwość CurrentUICulture bieżącego wątku dla wszystkich
        ///   przypadków przeszukiwania zasobów za pomocą tej klasy zasobów wymagającej zdefiniowania typu.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu DECLARE @ModelId INT;
        ///SELECT @ModelId = Id FROM dbo.Models WHERE ModelName LIKE &apos;%&apos; + @ModelName + &apos;%&apos;;
        ///
        ///IF @ModelId IS NULL
        ///BEGIN
        ///    RAISERROR (&apos;Model not found.&apos;, 16, 1);
        ///END
        ///ELSE
        ///BEGIN
        ///INSERT INTO [dbo].[Cars] (
        ///[ModelId],
        ///[Year],
        ///[LicensePlate],
        ///[IsAvailable],
        ///[IsActive]
        ///) VALUES (
        ///
        ///@ModelId,
        ///@Year,
        ///@LicensePlate,
        ///@IsAvailable,
        ///1
        ///)
        ///END.
        /// </summary>
        public static string Car_Create {
            get {
                return ResourceManager.GetString("Car_Create", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu IF 
        ///(EXISTS (SELECT 1 FROM dbo.Cars WHERE Id = @CarId AND IsActive = 0)) OR (NOT EXISTS (SELECT 1 FROM dbo.Cars WHERE Id = @CarId)) 
        ///BEGIN RAISERROR (&apos;Car not found.&apos;,16, 1) END
        ///ELSE
        ///
        ///
        ///UPDATE dbo.Cars 
        ///SET IsActive = 0 
        ///WHERE dbo.Cars.Id = @carId AND IsActive = 1;.
        /// </summary>
        public static string Car_Delete {
            get {
                return ResourceManager.GetString("Car_Delete", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu SELECT 
        ///	Cars.Id, Brands.BrandName, Models.ModelName, Cars.Year, Cars.LicensePlate, Cars.IsAvailable
        ///FROM dbo.Cars as Cars 
        ///INNER JOIN dbo.Models ON Cars.ModelId = dbo.Models.Id
        ///INNER JOIN dbo.Brands ON Models.BrandId = dbo.Brands.Id
        ///WHERE IsActive = 1;.
        /// </summary>
        public static string Car_GetAll {
            get {
                return ResourceManager.GetString("Car_GetAll", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu IF 
        ///(EXISTS (SELECT 1 FROM dbo.Cars WHERE Id = @CarId AND IsActive = 0)) OR (NOT EXISTS (SELECT 1 FROM dbo.Cars WHERE Id = @CarId)) 
        ///BEGIN RAISERROR (&apos;Car not found.&apos;,16, 1) END
        ///ELSE
        ///
        ///SELECT 
        ///	Cars.Id, Brands.BrandName, Models.ModelName, Cars.Year, Cars.LicensePlate, Cars.IsAvailable
        ///FROM dbo.Cars as Cars 
        ///INNER JOIN dbo.Models ON Cars.ModelId = dbo.Models.Id
        ///INNER JOIN dbo.Brands ON Models.BrandId = dbo.Brands.Id
        ///WHERE Cars.id = @carId AND IsActive = 1;
        ///.
        /// </summary>
        public static string Car_GetById {
            get {
                return ResourceManager.GetString("Car_GetById", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu SELECT ModelName, BrandName, Year, LicensePlate, IsAvailable 
        ///FROM dbo.Cars 
        ///INNER JOIN dbo.Models ON dbo.Cars.ModelId = dbo.Models.Id
        ///INNER JOIN dbo.Brands ON dbo.Models.BrandId = dbo.Brands.Id
        ///WHERE IsActive = 1
        ///  AND (@ModelName IS NULL OR ModelName LIKE @ModelName + &apos;%&apos;)
        ///  AND (@BrandName IS NULL OR BrandName LIKE @BrandName + &apos;%&apos;)
        ///  AND (
        ///        (@YearFrom IS NULL AND @YearTo IS NULL)
        ///        OR (@YearFrom IS NOT NULL AND @YearTo IS NULL AND Year &gt;= @YearFrom)
        ///        OR (@YearFrom IS NULL A [obcięto pozostałą część ciągu]&quot;;.
        /// </summary>
        public static string Car_Search {
            get {
                return ResourceManager.GetString("Car_Search", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu IF 
        ///(EXISTS (SELECT 1 FROM dbo.Cars WHERE Id = @Id AND IsActive = 0)) OR (NOT EXISTS (SELECT 1 FROM dbo.Cars WHERE Id = @Id)) 
        ///BEGIN RAISERROR (&apos;Car not found.&apos;,16, 1) END
        ///ELSE
        ///
        ///IF NOT EXISTS (SELECT * FROM dbo.Models WHERE ModelName LIKE &apos;%&apos; + @ModelName + &apos;%&apos;)
        ///BEGIN
        ///    RAISERROR (&apos;Model not found.&apos;, 16, 1);
        ///END
        ///
        ///UPDATE Cars
        ///	SET 
        ///	Cars.year = COALESCE(NULLIF(@Year, &apos;&apos;), Cars.year), 
        ///	Cars.ModelId = COALESCE((SELECT id FROM dbo.Models WHERE Models.ModelName LIKE &apos;%&apos; + NULLIF(@ModelName, &apos;&apos;) + [obcięto pozostałą część ciągu]&quot;;.
        /// </summary>
        public static string Car_Update {
            get {
                return ResourceManager.GetString("Car_Update", resourceCulture);
            }
        }
    }
}
